#pragma kernel ComputeNoise

uniform int normalize;

uniform int octaves;
uniform float falloff;

uniform float noiseScale;

uniform float2 offset;

uniform StructuredBuffer<int> perm;

RWTexture2D<float4> Result;

uniform uint2 reses;

//
// STATIC CODES
//

//int grad3[3][3] = {{ 3, 3, 3 }, { 3, 3, 3 }, { 3, 3, 3 }};

static int grad3[12][3] = {{1,1,0}, {-1,1,0}, {1,-1,0}, {-1,-1,0}, {1,0,1}, {-1,0,1}, {1,0,-1}, {-1,0,-1}, {0,1,1}, {0,-1,1}, {0,1,-1}, {0,-1,-1}};

static int grad4[32][4] = { {0, 1, 1, 1 }, {0,1,1,-1},  {0,1,-1,1},  {0,1,-1,-1},
                                    {0,-1,1,1}, {0,-1,1,-1}, {0,-1,-1,1}, {0,-1,-1,-1},
                                    {1,0,1,1}, {1,0,1,-1},  {1,0,-1,1},  {1,0,-1,-1},
                                    {-1,0,1,1}, {-1,0,1,-1}, {-1,0,-1,1}, {-1,0,-1,-1},
                                    {1,1,0,1}, {1,1,0,-1},  {1,-1,0,1},  {1,-1,0,-1},
                                    {-1,1,0,1}, {-1,1,0,-1}, {-1,-1,0,1}, {-1,-1,0,-1},
                                    {1,1,1,0}, {1,1,-1,0},  {1,-1,1,0},  {1,-1,-1,0},
                                    {-1,1,1,0}, {-1,1,-1,0}, {-1,-1,1,0}, {-1,-1,-1,0}};

static int simplex[64][4] = {
 {0,1,2,3}, {0,1,3,2}, {0,0,0,0}, {0,2,3,1}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {1,2,3,0},
 {0,2,1,3}, {0,0,0,0}, {0,3,1,2}, {0,3,2,1}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {1,3,2,0},
 {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0},
 {1,2,0,3}, {0,0,0,0}, {1,3,0,2}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {2,3,0,1}, {2,3,1,0},
 {1,0,2,3}, {1,0,3,2}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {2,0,3,1}, {0,0,0,0}, {2,1,3,0},
 {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0},
 {2,0,1,3}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {3,0,1,2}, {3,0,2,1}, {0,0,0,0}, {3,1,2,0},
 {2,1,0,3}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {3,1,0,2}, {0,0,0,0}, {3,2,0,1}, {3,2,1,0}};


int fastfloor(float x) {
    return x > 0 ? int(x) : int(x) - 1;
}
float dotF(int g[3], float x, float y) {
    return g[0] * x + g[1] * y;
}
float dotF(int g[3], float x, float y, float z) {
    return g[0] * x + g[1] * y + g[2] * z;
}
float dotF(int g[4], float x, float y, float z, float w) {
    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;
}


//
// NOISE GENERATION CODE
//

 float Noise(float x, float y) {
     float n0, n1, n2;
     float F2 = 0.5 * (sqrt(3.0) - 1.0);
     float s = (x + y) * F2;
     int i = fastfloor(x + s);
     int j = fastfloor(y + s);
     float G2 = (3.0 - sqrt(3.0)) / 6.0;
     float t = (i + j) * G2;
     float X0 = i - t;
     float Y0 = j - t;
     float x0 = x - X0;
     float y0 = y - Y0;
 
     int i1, j1;
     if (x0 > y0) {
         i1 = 1;
         j1 = 0;
     } else {
         i1 = 0;
         j1 = 1;
     }
 
     float x1 = x0 - i1 + G2;
     float y1 = y0 - j1 + G2;
     float x2 = x0 - 1.0 + 2.0 * G2;
     float y2 = y0 - 1.0 + 2.0 * G2;
 
     int ii = i & 255;
     int jj = j & 255;
     int gi0 = perm[ii + perm[jj]] % 12u;
     int gi1 = perm[ii + i1 + perm[jj + j1]] % 12u;
     int gi2 = perm[ii + 1 + perm[jj + 1]] % 12u;
 
     float t0 = 0.5 - x0 * x0 - y0 * y0;
     if (t0 < 0)
         n0 = 0.0; else {
         t0 *= t0;
         n0 = t0 * t0 * dotF(grad3[gi0], x0, y0);
    }
     float t1 = 0.5 - x1 * x1 - y1 * y1;
     if (t1 < 0)
         n1 = 0.0; else {
         t1 *= t1;
         n1 = t1 * t1 * dotF(grad3[gi1], x1, y1);
     }
     float t2 = 0.5 - x2 * x2 - y2 * y2;
     if (t2 < 0)
         n2 = 0.0; else {
         t2 *= t2;
         n2 = t2 * t2 * dotF(grad3[gi2], x2, y2);
     }
 
     return 70.0 * (n0 + n1 + n2);
 }

float Noise(float x) {
    return Noise(x, 0);
}


//3D
float Noise(float x, float y, float z) {
    float n0, n1, n2, n3;

    float F3 = 1.0 / 3.0;
    float s = (x + y + z) * F3;
    int i = fastfloor(x + s);
    int j = fastfloor(y + s);
    int k = fastfloor(z + s);
    float G3 = 1.0 / 6.0;
    float t = (i + j + k) * G3;
    float X0 = i - t;
    float Y0 = j - t;
    float Z0 = k - t;
    float x0 = x - X0;
    float y0 = y - Y0;
    float z0 = z - Z0;

    int i1, j1, k1;
    int i2, j2, k2;
    if (x0 >= y0) {
        if (y0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        } else if (x0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        }
    } else {
        if (y0 < z0) {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else if (x0 < z0) {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        }
    }

    float x1 = x0 - i1 + G3;
    float y1 = y0 - j1 + G3;
    float z1 = z0 - k1 + G3;
    float x2 = x0 - i2 + 2.0 * G3;
    float y2 = y0 - j2 + 2.0 * G3;
    float z2 = z0 - k2 + 2.0 * G3;
    float x3 = x0 - 1.0 + 3.0 * G3;
    float y3 = y0 - 1.0 + 3.0 * G3;
    float z3 = z0 - 1.0 + 3.0 * G3;

    int ii = i & 255;
    int jj = j & 255;
    int kk = k & 255;
    int gi0 = perm[ii + perm[jj + perm[kk]]] % 12u;
    int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12u;
    int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12u;
    int gi3 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12u;

    float t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
    if (t0 < 0)
        n0 = 0.0; else {
        t0 *= t0;
        n0 = t0 * t0 * dotF(grad3[gi0], x0, y0, z0);
    }
    float t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
    if (t1 < 0)
        n1 = 0.0; else {
        t1 *= t1;
        n1 = t1 * t1 * dotF(grad3[gi1], x1, y1, z1);
    }
    float t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
    if (t2 < 0)
        n2 = 0.0; else {
        t2 *= t2;
        n2 = t2 * t2 * dotF(grad3[gi2], x2, y2, z2);
    }
    float t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
    if (t3 < 0)
        n3 = 0.0; else {
        t3 *= t3;
        n3 = t3 * t3 * dotF(grad3[gi3], x3, y3, z3);
    }

    return 32.0 * (n0 + n1 + n2 + n3);
}

//4D
float Noise(float x, float y, float z, float w) {

    float F4 = (sqrt(5.0) - 1.0) / 4.0;
    float G4 = (5.0 - sqrt(5.0)) / 20.0;
    float n0, n1, n2, n3, n4;

    float s = (x + y + z + w) * F4;
    int i = fastfloor(x + s);
    int j = fastfloor(y + s);
    int k = fastfloor(z + s);
    int l = fastfloor(w + s);
    float t = (i + j + k + l) * G4;
    float X0 = i - t;
    float Y0 = j - t;
    float Z0 = k - t;
    float W0 = l - t;
    float x0 = x - X0;
    float y0 = y - Y0;
    float z0 = z - Z0;
    float w0 = w - W0;

    int c1 = (x0 > y0) ? 32 : 0;
    int c2 = (x0 > z0) ? 16 : 0;
    int c3 = (y0 > z0) ? 8 : 0;
    int c4 = (x0 > w0) ? 4 : 0;
    int c5 = (y0 > w0) ? 2 : 0;
    int c6 = (z0 > w0) ? 1 : 0;
    int c = c1 + c2 + c3 + c4 + c5 + c6;
    int i1, j1, k1, l1;
    int i2, j2, k2, l2;
    int i3, j3, k3, l3;

    i1 = simplex[c][0] >= 3 ? 1 : 0;
    j1 = simplex[c][1] >= 3 ? 1 : 0;
    k1 = simplex[c][2] >= 3 ? 1 : 0;
    l1 = simplex[c][3] >= 3 ? 1 : 0;

    i2 = simplex[c][0] >= 2 ? 1 : 0;
    j2 = simplex[c][1] >= 2 ? 1 : 0;
    k2 = simplex[c][2] >= 2 ? 1 : 0;
    l2 = simplex[c][3] >= 2 ? 1 : 0;

    i3 = simplex[c][0] >= 1 ? 1 : 0;
    j3 = simplex[c][1] >= 1 ? 1 : 0;
    k3 = simplex[c][2] >= 1 ? 1 : 0;
    l3 = simplex[c][3] >= 1 ? 1 : 0;

    float x1 = x0 - i1 + G4;
    float y1 = y0 - j1 + G4;
    float z1 = z0 - k1 + G4;
    float w1 = w0 - l1 + G4;
    float x2 = x0 - i2 + 2.0 * G4;
    float y2 = y0 - j2 + 2.0 * G4;
    float z2 = z0 - k2 + 2.0 * G4;
    float w2 = w0 - l2 + 2.0 * G4;
    float x3 = x0 - i3 + 3.0 * G4;
    float y3 = y0 - j3 + 3.0 * G4;
    float z3 = z0 - k3 + 3.0 * G4;
    float w3 = w0 - l3 + 3.0 * G4;
    float x4 = x0 - 1.0 + 4.0 * G4;
    float y4 = y0 - 1.0 + 4.0 * G4;
    float z4 = z0 - 1.0 + 4.0 * G4;
    float w4 = w0 - 1.0 + 4.0 * G4;
    int ii = i & 255;
    int jj = j & 255;
    int kk = k & 255;
    int ll = l & 255;
    int gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32u;
    int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32u;
    int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32u;
    int gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32u;
    int gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32u;

    float t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
    if (t0 < 0)
        n0 = 0.0; else {
        t0 *= t0;
        n0 = t0 * t0 * dotF(grad4[gi0], x0, y0, z0, w0);
    }
    float t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
    if (t1 < 0)
        n1 = 0.0; else {
        t1 *= t1;
        n1 = t1 * t1 * dotF(grad4[gi1], x1, y1, z1, w1);
    }
    float t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
    if (t2 < 0)
        n2 = 0.0; else {
        t2 *= t2;
        n2 = t2 * t2 * dotF(grad4[gi2], x2, y2, z2, w2);
    }
    float t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
    if (t3 < 0)
        n3 = 0.0; else {
        t3 *= t3;
        n3 = t3 * t3 * dotF(grad4[gi3], x3, y3, z3, w3);
    }
    float t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
    if (t4 < 0)
        n4 = 0.0; else {
        t4 *= t4;
        n4 = t4 * t4 * dotF(grad4[gi4], x4, y4, z4, w4);
    }
    return 27.0 * (n0 + n1 + n2 + n3 + n4);
}

//
// NOISE COMBINATION STUFF
// 

float CombineNoise(float noiseValues[10]) {
    float finalNoiseValue = 0.0;
    float amplitude = 1.0;
    float totalAmplitude = 0.0;

    for (int o = 0; o < octaves; o++) {
        amplitude *= falloff;
        totalAmplitude += amplitude;
        finalNoiseValue += noiseValues[o] * amplitude;
    }

    return finalNoiseValue / totalAmplitude;
}

void GetNoiseValues(float x, float y, float z, float w, int dimension, out float noiseValues[10]) {
    float freq = 1.0;

    switch (dimension) {
        case 1:
            for (int o1 = 0; o1 < octaves; o1++) {
                noiseValues[o1] = Noise(x * freq);
                freq *= 2.0;
            }
            break;

        case 2:
            for (int o2 = 0; o2 < octaves; o2++) {
                noiseValues[o2] = Noise(x * freq, y * freq);
                freq *= 2.0;
            }
            break;

        case 3:
            for (int o3 = 0; o3 < octaves; o3++) {
                noiseValues[o3] = Noise(x * freq, y * freq, z * freq);
                freq *= 2.0;
            }
            break;

        case 4:
            for (int o4 = 0; o4 < octaves; o4++) {
                noiseValues[o4] = Noise(x * freq, y * freq, z * freq, w * freq);
                freq *= 2.0;
            }
            break;
    }
}

float NoiseCombinedOctaves(float x) {
    float noiseValues[10];
    GetNoiseValues(x, 0, 0, 0, 1, noiseValues);
    return CombineNoise(noiseValues);
}

float NoiseCombinedOctaves(float x, float y) {
    float noiseValues[10];
    GetNoiseValues(x, y, 0, 0, 2, noiseValues);
    return CombineNoise(noiseValues);
}

float NoiseCombinedOctaves(float x, float y, float z) {
    float noiseValues[10];
    GetNoiseValues(x, y, z, 0, 3, noiseValues);
    return CombineNoise(noiseValues);
}

float NoiseCombinedOctaves(float x, float y, float z, float w) {
    float noiseValues[10];
    GetNoiseValues(x, y, z, w, 4, noiseValues);
    return CombineNoise(noiseValues);
}

[numthreads(16, 16, 1)]
void ComputeNoise(uint3 id : SV_DispatchThreadID) {
    if (id.x > reses.x || id.y > reses.y)
        return;

    float noiseValue = NoiseCombinedOctaves((id.x + offset.x) * noiseScale, (id.y + offset.y) * noiseScale);

    if (normalize)
        noiseValue = (noiseValue + 1) * 0.5;

    Result[id.xy] = float4(noiseValue, noiseValue, noiseValue, 1);
}



#pragma kernel ComputeNoiseArray


uniform StructuredBuffer<float>  float1Array;
uniform StructuredBuffer<float2> float2Array;
uniform StructuredBuffer<float3> float3Array;
uniform StructuredBuffer<float4> float4Array;

uniform RWStructuredBuffer<float> outputArray;

uniform int dimension;

[numthreads(16, 1, 1)]
void ComputeNoiseArray(uint3 id : SV_DispatchThreadID) {

    if (id.x >= outputArray.Length)
        return;

    switch (dimension) {
        case 1:
            float noiseValue = NoiseCombinedOctaves(float1Array[id.x] * noiseScale);
            if (normalize)
                noiseValue = (noiseValue + 1) * 0.5;
            outputArray[id.x] = noiseValue;
            break;

        case 2:
            float noiseValue2 = NoiseCombinedOctaves(float2Array[id.x].x * noiseScale, float2Array[id.x].y * noiseScale);
            if (normalize)
                noiseValue2 = (noiseValue2 + 1) * 0.5;
            outputArray[id.x] = noiseValue2;
            break;

        case 3:
            float noiseValue3 = NoiseCombinedOctaves(float3Array[id.x].x * noiseScale, float3Array[id.x].y * noiseScale, float3Array[id.x].z * noiseScale);
            if (normalize)
                noiseValue3 = (noiseValue3 + 1) * 0.5;
            outputArray[id.x] = noiseValue3;
            break;

        case 4:
            float noiseValue4 = NoiseCombinedOctaves(float4Array[id.x].r * noiseScale, float4Array[id.x].g * noiseScale,
                                                     float4Array[id.x].b * noiseScale, float4Array[id.x].a * noiseScale);
            if (normalize)
                noiseValue4 = (noiseValue4 + 1) * 0.5;
            outputArray[id.x] = noiseValue4;
            break;
    }

}